{"version":3,"file":"appender.js","sources":["../src/lib/util.js","../src/appender.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { createCodeFrame } from 'simple-code-frame';\nimport { parseStackTrace } from 'errorstacks';\n\nconst cwd = process.cwd();\nexport const res = (file) => path.resolve(cwd, file);\n\nexport function moduleDir(name) {\n\tlet file = require.resolve(name),\n\t\tfind = `${path.sep}node_modules${path.sep}${name}`,\n\t\tindex = file.indexOf(find);\n\treturn file.substring(0, index + find.length);\n}\n\nexport function fileExists(file) {\n\ttry {\n\t\treturn fs.statSync(file).isFile();\n\t} catch (e) {}\n\treturn false;\n}\n\nexport function readFile(file) {\n\ttry {\n\t\treturn fs.readFileSync(file, 'utf8');\n\t} catch (e) {}\n}\n\nexport function readDir(file) {\n\ttry {\n\t\treturn fs.readdirSync(file);\n\t} catch (e) {}\n}\n\nexport function tryRequire(file) {\n\tif (fileExists(file)) return require(file);\n}\n\nexport function dedupe(value, index, arr) {\n\treturn arr.indexOf(value) === index;\n}\n\nexport function indent(str, level) {\n\tconst space = ' '.repeat(level);\n\treturn str\n\t\t.split('\\n')\n\t\t.map((line) => space + line)\n\t\t.join('\\n');\n}\n\n/**\n * Colorize a pre-formatted code frame\n * @param {string} str\n */\nexport function highlightCodeFrame(str) {\n\treturn str\n\t\t.split('\\n')\n\t\t.map((line) => {\n\t\t\tif (/^>\\s(.*)/.test(line)) {\n\t\t\t\treturn line.replace(/^>(.*)/, (_, content) => {\n\t\t\t\t\treturn chalk.bold.redBright('>') + chalk.white(content);\n\t\t\t\t});\n\t\t\t} else if (/^\\s+\\|\\s+\\^/.test(line)) {\n\t\t\t\treturn line\n\t\t\t\t\t.replace('|', chalk.dim('|'))\n\t\t\t\t\t.replace('^', chalk.bold.redBright('^'));\n\t\t\t}\n\t\t\treturn chalk.dim(line);\n\t\t})\n\t\t.join('\\n');\n}\n\nexport function cleanStack(str, cwd = process.cwd()) {\n\tstr = str.replace(/^[\\s\\S]+\\n\\n([A-Za-z]*Error: )/g, '$1');\n\n\tlet stack = str.replace(\n\t\tnew RegExp(\n\t\t\t`( |\\\\()(https?:\\\\/\\\\/localhost:\\\\d+\\\\/base\\\\/|webpack:///|${cwd.replace(\n\t\t\t\t/([\\\\/[\\]()*+$!^.,?])/g,\n\t\t\t\t'\\\\$1'\n\t\t\t)}\\\\/*)?([^\\\\s():?]*?)(?:\\\\?[a-zA-Z0-9]+?)?(:\\\\d+(?::\\\\d+)?)`,\n\t\t\t'g'\n\t\t),\n\t\treplacer\n\t);\n\n\tlet frames = parseStackTrace(stack);\n\n\t// Some frameworks mess with the stack. Use a simple heuristic\n\t// to find the beginning of the proper stack.\n\tlet message = stack;\n\tif (frames.length) {\n\t\tlet lines = stack.split('\\n');\n\t\tlet stackStart = lines.indexOf(frames[0].raw);\n\t\tif (stackStart > 0) {\n\t\t\tmessage = lines\n\t\t\t\t.slice(0, stackStart)\n\t\t\t\t.map((s) => s.trim())\n\t\t\t\t.join('\\n');\n\t\t}\n\t}\n\n\t/**\n\t * The nearest location where the user's code triggered the error.\n\t * @type {import('errorstacks').StackFrame}\n\t */\n\tlet nearestFrame;\n\n\tstack = frames\n\t\t.filter((frame) => frame.type !== 'native' || frame.name !== 'Jasmine')\n\t\t.map((frame) => {\n\t\t\t// Only show frame for errors in the user's code\n\t\t\tif (\n\t\t\t\t!nearestFrame &&\n\t\t\t\t!/node_modules/.test(frame.fileName) &&\n\t\t\t\tframe.type !== 'native'\n\t\t\t) {\n\t\t\t\tnearestFrame = frame;\n\t\t\t}\n\n\t\t\t// Native traces don't have an error location\n\t\t\tif (!frame.name || frame.type === 'native') {\n\t\t\t\treturn chalk.gray(frame.raw.trim());\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tsourceFileName,\n\t\t\t\tcolumn,\n\t\t\t\tfileName,\n\t\t\t\tline,\n\t\t\t\tname,\n\t\t\t\tsourceColumn,\n\t\t\t\tsourceLine,\n\t\t\t} = frame;\n\n\t\t\tconst loc = chalk.cyanBright(`${fileName}:${line}:${column}`);\n\t\t\tconst originalLoc =\n\t\t\t\tsourceFileName !== ''\n\t\t\t\t\t? chalk.gray(' <- ') +\n\t\t\t\t\t  chalk.gray(`${sourceFileName}:${sourceLine}:${sourceColumn}`)\n\t\t\t\t\t: '';\n\t\t\treturn chalk.gray(`at ${name} (${loc}${originalLoc})`);\n\t\t})\n\t\t.join('\\n');\n\n\tlet codeFrame = '';\n\tif (nearestFrame) {\n\t\ttry {\n\t\t\tconst { fileName, line, column } = nearestFrame;\n\t\t\tif (fileName) {\n\t\t\t\tconst content = fs.readFileSync(fileName, 'utf-8');\n\t\t\t\tcodeFrame = createCodeFrame(content, line - 1, column - 1, {\n\t\t\t\t\tbefore: 2,\n\t\t\t\t\tafter: 2,\n\t\t\t\t});\n\t\t\t\tcodeFrame = highlightCodeFrame(codeFrame);\n\t\t\t\tcodeFrame = indent(codeFrame, 2) + '\\n';\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log('INTERNAL WARNING: Failed to read stack frame code: ' + err);\n\t\t}\n\t}\n\n\tmessage = indent(chalk.reset(message), 2);\n\treturn `\\n${message}\\n\\n${codeFrame}${indent(stack, 4)}\\n`;\n}\n\nfunction replacer(str, before, root, filename, position) {\n\treturn before + './' + filename + position;\n}\n","import chalk from 'chalk';\nimport { cleanStack } from './lib/util';\n\nexport function configure(config, layouts) {\n\tlet layout = layouts.colouredLayout;\n\treturn (logEvent) => {\n\t\tprocess.stdout.write(\n\t\t\tchalk.red(cleanStack(layout(logEvent, config.timezoneOffset))) + '\\n'\n\t\t);\n\t};\n}\n"],"names":["cwd","process","indent","str","level","space","repeat","split","map","line","join","highlightCodeFrame","test","replace","_","content","chalk","bold","redBright","white","dim","cleanStack","stack","RegExp","replacer","frames","parseStackTrace","message","length","lines","stackStart","indexOf","raw","slice","s","trim","nearestFrame","filter","frame","type","name","fileName","gray","sourceFileName","column","sourceColumn","sourceLine","loc","cyanBright","originalLoc","codeFrame","fs","readFileSync","createCodeFrame","before","after","err","console","log","reset","root","filename","position","configure","config","layouts","layout","colouredLayout","logEvent","stdout","write","red","timezoneOffset"],"mappings":"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"}